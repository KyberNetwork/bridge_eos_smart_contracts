'''
* dag manipulation on go tool output:
     -each 32 bytes chunk is internally reversed

* proofs manipulation on go tool output:
    -none
'''

PROOF_SIZE = 25
NUM_PROOFS = 64
MAX_PROOFS = 30 # this limitation is because of "/usr/local/bin/cleos: Argument list too long" error

# get json data

import json

#also add:
    #get:
        #rlp encoded raw data header
        #nonce,
        #all 128 results of dataset lookup result
        #witnessforlookup,
    #parse block number
    

dag_chunks = []
proof_chunks = []
with open('ethhashproof_output.json') as json_file:  
    data = json.load(json_file)
    for elem in data['elements']:
        stripped = elem.strip().replace('0x', '')
        padded = stripped.rjust(32 * 2, '0')
        rev =  "".join(reversed([padded[i:i+2] for i in range(0, len(padded), 2)])).encode("utf-8")
        dag_chunks.append(rev)

    counter = 0
    for elem in data['merkle_proofs']:
        stripped = elem.strip().replace('0x', '')
        padded = stripped.rjust(16 * 2, '0')
        proof_chunks.append(padded.encode("utf-8"))
        counter = counter + 1
        if counter >= (MAX_PROOFS * PROOF_SIZE):
            break

# print cleos cmd
final_st = "cleos push action bridge verify \'{ \n\
\"header_rlp_vec\": [0xf9, 0x02, 0x10, 0xa0, 0x4d, 0x1e, 0x1f, 0x82, 0x40, 0x0b, 0x58, 0x55, 0xf1, 0xec, 0xc1, 0xf6, 0x9e, 0xe5, 0x5b, 0x94, 0xe6, 0x3f, 0x66, 0x8f, 0xf4, 0x41, 0xff, 0xf5, 0xab, 0x5c, 0x54, 0x5e, 0x39, 0xa1, 0x8d, 0x0a, 0xa0, 0xfc, 0x45, 0x8f, 0x61, 0x6c, 0x83, 0x92, 0x48, 0xdc, 0x81, 0x59, 0xb9, 0x1c, 0x6a, 0x57, 0xa0, 0xab, 0xb5, 0xdf, 0x8f, 0x5c, 0xdf, 0x87, 0x49, 0x03, 0xe3, 0xbe, 0x8f, 0x47, 0x84, 0x77, 0x89, 0x94, 0x82, 0x9b, 0xd8, 0x24, 0xb0, 0x16, 0x32, 0x6a, 0x40, 0x1d, 0x08, 0x3b, 0x33, 0xd0, 0x92, 0x29, 0x33, 0x33, 0xa8, 0x30, 0xa0, 0x39, 0x69, 0x11, 0x34, 0x5f, 0xd5, 0xb3, 0x4b, 0x31, 0x89, 0x88, 0x2e, 0x15, 0x73, 0xb8, 0x7f, 0xa6, 0x4a, 0x11, 0xa3, 0x4d, 0x81, 0x0b, 0xbd, 0x77, 0xcb, 0xb3, 0xeb, 0xb4, 0xa1, 0x30, 0x11, 0xa0, 0x1e, 0x93, 0x38, 0x5b, 0xe2, 0x50, 0x04, 0x7b, 0xd0, 0xb5, 0xfc, 0xad, 0x90, 0x4c, 0x42, 0xe4, 0xbf, 0x4c, 0xed, 0x18, 0xda, 0xcc, 0x72, 0x9f, 0xc6, 0x8c, 0xd4, 0xe3, 0x87, 0x17, 0x27, 0xf0, 0xa0, 0x48, 0x52, 0xb4, 0x18, 0x9d, 0x25, 0x34, 0xc3, 0x79, 0xb1, 0x36, 0x5d, 0xf9, 0xbe, 0x0a, 0x51, 0xc1, 0x7f, 0x09, 0xf7, 0xd0, 0x34, 0x56, 0x13, 0x04, 0x0b, 0x1f, 0xa0, 0x20, 0x48, 0x18, 0x06, 0xb9, 0x01, 0x00, 0x04, 0x00, 0x20, 0x00, 0x00, 0x42, 0x00, 0x10, 0x02, 0x00, 0x40, 0x00, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x20, 0x01, 0x68, 0x02, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x90, 0x00, 0x80, 0x00, 0x00, 0x4c, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x09, 0x00, 0x04, 0x21, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0xa0, 0x4d, 0x00, 0x00, 0x00, 0x01, 0xa4, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x20, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x40, 0x60, 0x00, 0x00, 0x40, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x04, 0x30, 0x21, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0x20, 0x00, 0x20, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x04, 0x80, 0x02, 0x00, 0x02, 0x01, 0x02, 0x00, 0x00, 0x08, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x40, 0x40, 0x00, 0x80, 0x80, 0x20, 0x00, 0x14, 0x12, 0x00, 0x00, 0x80, 0x10, 0x00, 0x01, 0x30, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x05, 0x20, 0x00, 0x00, 0x00, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x01, 0x0a, 0x42, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x11, 0x00, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xa2, 0x00, 0x10, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x80, 0x84, 0x02, 0x10, 0x00, 0x01, 0x10, 0x02, 0x80, 0x87, 0x05, 0x8d, 0x4d, 0x00, 0x3a, 0x5e, 0xae, 0x83, 0x47, 0xb7, 0x60, 0x83, 0x66, 0x25, 0xf7, 0x83, 0x66, 0x07, 0xa1, 0x84, 0x5a, 0x2b, 0x46, 0xbb, 0x8f, 0xe4, 0xb8, 0x83, 0xe5, 0xbd, 0xa9, 0xe7, 0xa5, 0x9e, 0xe4, 0xbb, 0x99, 0xe9, 0xb1, 0xbc, 0xa0, 0x52, 0x47, 0x69, 0x1a, 0xb0, 0x95, 0x3f, 0xa5, 0xc5, 0xc2, 0xc8, 0x4b, 0x0b, 0x14, 0x2b, 0x6d, 0x62, 0xe9, 0xdc, 0x5f, 0x35, 0xa8, 0x65, 0xed, 0x19, 0x7b, 0x9c, 0xd3, 0x73, 0x6a, 0xf6, 0xf1, 0x88, 0x85, 0x72, 0x87, 0x40, 0x01, 0x60, 0x21, 0x8d],\n \
\"dag_vec\":[\n"
for chunk in dag_chunks:
    n=2
    split_to_2 = ["0x" + chunk[i:i+n] for i in range(0, len(chunk), n)]
    as_str = (', '.join(split_to_2) + ',')
    final_st = final_st + as_str + "\n"
final_st = final_st + "],\n"

final_st = final_st + "\"proof_vec\":[\n"

for chunk in proof_chunks:
    n=2
    split_to_2 = ["0x" + chunk[i:i+n] for i in range(0, len(chunk), n)]
    as_str = (', '.join(split_to_2) + ',')
    final_st = final_st + as_str + "\n"
final_st = final_st + "]}\' -p bridge@active"

print(final_st)
