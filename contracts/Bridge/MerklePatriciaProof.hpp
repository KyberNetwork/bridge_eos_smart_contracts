#include <eosiolib/eosio.hpp>
#include <eosiolib/print.hpp>
#include <eosiolib/types.h>

/*****************************************************************************/

using std::vector;
using byte = uint8_t;
using bytes = std::vector<byte>;

void print_array(std::string str, uint8_t *arr, uint size) {
    printf("%s", str.c_str());
    for (int i = 0; i < size; i++) {
        printf("%02X", arr[i]);
    }
    printf("\n");
}

static std::vector<unsigned char> HexToBytes(const std::string& hex) {
        std::vector<unsigned char> bytes;

        for (unsigned int i = 0; i < hex.length(); i += 2) {
                std::string byteString = hex.substr(i, 2);
                unsigned char byte = (unsigned char) strtol(byteString.c_str(), NULL, 16);
                bytes.push_back(byte);
        }

        return bytes;
}

uint8_t _getNthNibbleOfBytes(uint n, bytes str) {
    return byte(n%2==0 ? uint8_t(str[n/2])/0x10 : uint8_t(str[n/2])%0x10);
}

void _getNibbleArray(bytes b, bytes *nibbles) {

    if (b.size() > 0) {
        uint8_t offset;
        uint nibbles_size;
        uint8_t hpNibble = uint8_t(_getNthNibbleOfBytes(0,b));

        if (hpNibble == 1 || hpNibble == 3) {
            nibbles_size = b.size() * 2 - 1;
            byte oddNibble = _getNthNibbleOfBytes(1,b);
            (*nibbles).push_back(oddNibble);
            offset = 1;
        } else {

            // TAL - addition, recheck
            if (b.size() == 1) {
                (*nibbles).push_back(_getNthNibbleOfBytes(0,b));
                (*nibbles).push_back(_getNthNibbleOfBytes(1,b));
                return;
            }

            nibbles_size= (b.size() * 2- 2);
            offset = 0;
        }

        for (uint i = offset; i < nibbles_size; i++) {
            (*nibbles).push_back(_getNthNibbleOfBytes(i-offset+2,b));
        }
    }

    return;
}

uint _nibblesToTraverse(bytes encodedPartialPath, bytes path, uint pathPtr) {

    uint len;
    // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath
    // and slicedPath have elements that are each one hex character (1 nibble)
    bytes partialPath;
    _getNibbleArray(encodedPartialPath, &partialPath);

    bytes slicedPath;
    slicedPath.resize(partialPath.size());
    memcpy(&slicedPath[0], &partialPath[0], partialPath.size());

    // pathPtr counts nibbles in path
    // partialPath.length is a number of nibbles
    for (uint i=pathPtr; i<pathPtr+partialPath.size(); i++) {
        byte pathNibble = path[i];
        slicedPath[i-pathPtr] = pathNibble;
    }

    //if (keccak256(partialPath) == keccak256(slicedPath)) {
    if (memcmp(&partialPath[0], &slicedPath[0], partialPath.size()) == 0) {
        len = partialPath.size();
    } else {
        len = 0;
    }
    return len;
}

// TODO - get values as reference/pointers
int trieValue(bytes encodedPath,
              bytes value,
              bytes all_parent_nodes_rlps,
              vector<uint> all_parnet_rlp_sizes,
              uint8_t *root) {

    vector<bytes> parent_nodes_rlps;
    uint offset = 0;
    // TODO: switch to vectors
    for(uint i=0; i< all_parnet_rlp_sizes.size(); i++) {
        bytes::const_iterator first = all_parent_nodes_rlps.begin() + offset;
        bytes::const_iterator last = first + all_parnet_rlp_sizes[i];

        bytes newVec(first, last);
        parent_nodes_rlps.push_back(newVec);
        offset += all_parnet_rlp_sizes[i];
    }

    unsigned char *nodeKey = root;
    uint pathPtr = 0;

    bytes path;
    _getNibbleArray(encodedPath, &path);
    if (path.size() == 0) {return false;}

    for (uint i = 0; i < parent_nodes_rlps.size(); i++) {
        if (pathPtr > path.size()) {return false;}

        bytes *currentNodePtr = &parent_nodes_rlps[i];

        uint8_t hash[32];
        keccak256(hash, &(*currentNodePtr)[0], (*currentNodePtr).size());

        if (memcmp(nodeKey, hash, 32) != 0) {
            printf("wrong 1!\n");
          return false;
        }

        rlp_item currentNodeList[17];
        uint current_node_list_len;
        decode_list(&(*currentNodePtr)[0], currentNodeList, &current_node_list_len);

        if (current_node_list_len == 17) {
            printf("branch node\n");
            if (pathPtr == path.size()) {

                uint8_t hash1[32];
                keccak256(hash1, currentNodeList[16].content, currentNodeList[16].len);

                uint8_t hash2[32];
                keccak256(hash2, &value[0], value.size());

                if (memcmp(hash1, hash2, 32) == 0) {
                    printf("right 2!\n");
                    return true;
                } else {
                    printf("wrong 2!\n");
                    return false;
                }
            }

            uint nextPathNibble = uint(path[pathPtr]);
            if (nextPathNibble > 16) {return false;}
            nodeKey = currentNodeList[nextPathNibble].content;
            pathPtr += 1;
        } else if (current_node_list_len == 2) {

            // create bytes out of array
            bytes currentNodeList_0_vec;
            currentNodeList_0_vec.resize(currentNodeList[0].len);
            memcpy(&currentNodeList_0_vec[0], currentNodeList[0].content, currentNodeList[0].len);

            pathPtr += _nibblesToTraverse(currentNodeList_0_vec, path, pathPtr);

            if (pathPtr == path.size()) { //leaf node
                printf("leaf node\n");
                uint8_t hash1[32];
                keccak256(hash1, currentNodeList[1].content, currentNodeList[1].len);

                uint8_t hash2[32];
                keccak256(hash2, &value[0], value.size());

                if (memcmp(hash1, hash2, 32) == 0) {
                    printf("right 3!\n");
                    return true;
                } else {
                    printf("wrong 3!\n");
                    return false;
                }
            }

            printf("extension node\n");
            if (_nibblesToTraverse(currentNodeList_0_vec, path, pathPtr) == 0) {
                return false;
            }

            nodeKey = currentNodeList[1].content;
        } else {
          printf("wrong 4!\n");
          return false;
        }
    }

    return false;
}

/*
int main() {

    bytes value;
    bytes encodedPath;
    bytes root;

    vector<uint> all_parnet_rlp_sizes;
    bytes all_parent_nodes_rlps;

    printf("tx trie for transaction - 0xb53f752216120e8cbe18783f41c6d960254ad59fac16229d4eaec5f7591319de \n");
    value = bytes(HexToBytes("f86c80850df847580082520894b56d622ddf60ec532b5f43b4ff9b0e7b1ff92db3883782dace9d9000008025a03c76c52993d9519cbcff2abeed7c1a62f81d83072fd0b6c245e6138e6088d313a0674e59dd82cfe38e1ae326796060df3fb776e890508a80343b1d98f3a70dab41"));
    encodedPath = bytes(HexToBytes("80"));
    root = bytes(HexToBytes("76de858022a0904dbc0d6ed58f42423abe3b3ced468f81636d52c74d2186efa3"));//size32

    all_parnet_rlp_sizes = {147, 115};
    all_parent_nodes_rlps.clear();
    all_parent_nodes_rlps =
    {0xf8,0x91,0xa0,0xe6,0x89,0xa9,0x55,0x24,0x28,0x5e,0x09,0xf8,0xec,0xc6,0xb5,0x41,0x09,0xf1,0xb8,0xba,0xcf,0x8f,0x36,0x20,0xa2,0x7b,0xbb,0x5f,0x8a,0x42,0x3b,0xe1,0x60,0xe3,0x43,0xa0,0xf5,0x8e,0xd7,0x99,0x64,0xe3,0x73,0x02,0xcf,0x24,0x96,0x7e,0xe7,0x17,0x7f,0x1b,0x8f,0x70,0x3e,0xb3,0xad,0xbc,0x6f,0x50,0xfa,0x42,0xe5,0x6c,0x12,0xdb,0x8c,0xac,0xa0,0x52,0xd1,0xf0,0xf1,0x4a,0xf9,0x06,0xe9,0x82,0xf1,0x94,0xb6,0x21,0xf4,0xcd,0x8e,0x6b,0x8a,0x78,0x19,0x9e,0x94,0x89,0xff,0x2e,0x45,0xbd,0xfc,0x5e,0xc9,0x88,0x25,0x80,0x80,0x80,0x80,0x80,0xa0,0x1e,0x51,0xb4,0x18,0x1e,0x4a,0xb8,0xbb,0xb9,0xb0,0x80,0x7d,0x87,0x5c,0x8d,0x91,0x13,0x44,0x35,0x95,0x33,0x4f,0x34,0xb7,0x73,0xb6,0xb3,0xc2,0x12,0x8d,0x1a,0xc2,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
     0xf8,0x71,0x30,0xb8,0x6e,0xf8,0x6c,0x80,0x85,0x0d,0xf8,0x47,0x58,0x00,0x82,0x52,0x08,0x94,0xb5,0x6d,0x62,0x2d,0xdf,0x60,0xec,0x53,0x2b,0x5f,0x43,0xb4,0xff,0x9b,0x0e,0x7b,0x1f,0xf9,0x2d,0xb3,0x88,0x37,0x82,0xda,0xce,0x9d,0x90,0x00,0x00,0x80,0x25,0xa0,0x3c,0x76,0xc5,0x29,0x93,0xd9,0x51,0x9c,0xbc,0xff,0x2a,0xbe,0xed,0x7c,0x1a,0x62,0xf8,0x1d,0x83,0x07,0x2f,0xd0,0xb6,0xc2,0x45,0xe6,0x13,0x8e,0x60,0x88,0xd3,0x13,0xa0,0x67,0x4e,0x59,0xdd,0x82,0xcf,0xe3,0x8e,0x1a,0xe3,0x26,0x79,0x60,0x60,0xdf,0x3f,0xb7,0x76,0xe8,0x90,0x50,0x8a,0x80,0x34,0x3b,0x1d,0x98,0xf3,0xa7,0x0d,0xab,0x41};

    trieValue(encodedPath, value, all_parent_nodes_rlps, all_parnet_rlp_sizes, root);

    printf("receipt try for transaction - 0x8d0da05c3256da94a4213149de3e17fae7d1fd1b86fd4e57557527325ba87adc \n");
    value = bytes(HexToBytes("f901c7a082937ecabda0b9042d29ff6de2210f14cf9ced28dfd2e62bfdd2f51461953a95830218e0bf89df89b94f0f8b0b8dbb1124261fc8d778e2287e3fd2cf4f5f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000000f3a9ca4ed4c75379d4923cb8fc5af3ca3e86ef1a0000000000000000000000000211bef7d55522b2a0d67328aaa05094bdee87df1a00000000000000000000000000000000000000000000000000000000003f940ae"));
    encodedPath = bytes(HexToBytes("03"));
    root = bytes(HexToBytes("778a4c87094be8261a121d66eb0a5cff0e8be514f5031d87424d1e758a6b4e67"));//size32

    all_parnet_rlp_sizes = {83, 115, 465};
    all_parent_nodes_rlps.clear();
    all_parent_nodes_rlps =
    {
    0xf8,0x51,0xa0,0x07,0x8e,0x14,0xa9,0x74,0xe1,0xd9,0xa6,0x1d,0xbe,0xe1,0x0a,0x8b,0xe5,0xc1,0xc0,0x19,0x6d,0x72,0x50,0xdc,0x64,0x29,0x83,0xa4,0xe6,0x5b,0x73,0x33,0x01,0x01,0x67,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xa0,0x57,0x68,0xe0,0x97,0x8d,0x0a,0xb9,0x94,0x69,0x3e,0x98,0x43,0xc9,0x34,0x1f,0x4a,0xa3,0x95,0x43,0xd1,0xbe,0x73,0x37,0xed,0xf1,0xf3,0x9e,0x66,0xd4,0xaa,0x87,0x3a,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
    0xf8,0x71,0x80,0xa0,0x5c,0xb0,0xf0,0xdf,0xf6,0x38,0x05,0x50,0x39,0x30,0xc9,0xbc,0xfd,0xbc,0xe3,0x62,0xaa,0xbe,0x67,0xce,0xe7,0xf1,0xc3,0x8c,0xa7,0xbf,0xaf,0x1a,0x55,0xfd,0x94,0xc3,0xa0,0xde,0x6a,0xb2,0xb7,0x23,0x3b,0x56,0xe6,0x68,0xbf,0x93,0x99,0x70,0x8a,0x9a,0x19,0xac,0x9d,0xce,0x55,0x0e,0xf0,0xf4,0x9c,0xfd,0x89,0x49,0xa0,0xad,0x34,0x0d,0xe1,0xa0,0x37,0x77,0x0f,0x71,0xe3,0x07,0x54,0xc1,0xaf,0xcc,0x99,0xe5,0x48,0x70,0xee,0xf4,0xe3,0x03,0xca,0x2c,0x35,0x3c,0x6a,0x45,0x8a,0x80,0x3a,0xdc,0x87,0x85,0xc1,0xed,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
    0xf9,0x01,0xce,0x20,0xb9,0x01,0xca,0xf9,0x01,0xc7,0xa0,0x82,0x93,0x7e,0xca,0xbd,0xa0,0xb9,0x04,0x2d,0x29,0xff,0x6d,0xe2,0x21,0x0f,0x14,0xcf,0x9c,0xed,0x28,0xdf,0xd2,0xe6,0x2b,0xfd,0xd2,0xf5,0x14,0x61,0x95,0x3a,0x95,0x83,0x02,0x18,0xe0,0xb9,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x08,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x9d,0xf8,0x9b,0x94,0xf0,0xf8,0xb0,0xb8,0xdb,0xb1,0x12,0x42,0x61,0xfc,0x8d,0x77,0x8e,0x22,0x87,0xe3,0xfd,0x2c,0xf4,0xf5,0xf8,0x63,0xa0,0xdd,0xf2,0x52,0xad,0x1b,0xe2,0xc8,0x9b,0x69,0xc2,0xb0,0x68,0xfc,0x37,0x8d,0xaa,0x95,0x2b,0xa7,0xf1,0x63,0xc4,0xa1,0x16,0x28,0xf5,0x5a,0x4d,0xf5,0x23,0xb3,0xef,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0x3a,0x9c,0xa4,0xed,0x4c,0x75,0x37,0x9d,0x49,0x23,0xcb,0x8f,0xc5,0xaf,0x3c,0xa3,0xe8,0x6e,0xf1,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x21,0x1b,0xef,0x7d,0x55,0x52,0x2b,0x2a,0x0d,0x67,0x32,0x8a,0xaa,0x05,0x09,0x4b,0xde,0xe8,0x7d,0xf1,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xf9,0x40,0xae
    };

    trieValue(encodedPath, value, all_parent_nodes_rlps, all_parnet_rlp_sizes, root);

    printf("receipt try for transaction - 0x686545d1eab8ef0f3035cb1b26f213512dd22c091f8fbc9984becaae465d136e \n");
    value = bytes(HexToBytes("f906f40183313299b9010000000000000000000010000000000010200010800400000000000000000000000000000000000000400020000000020000000000000000000000008000000000000000008000000048000008000000000000000400000004000000000040000000000000000000000000000000080000000000000000000000000010000000001000000040000000000000000000000000000000010000000000000000000000000000000000a00000000000044008000000000400000000000200000000001000000002090000000000000000002000080000000000000000000000000400000000000000020000088000000000000000040000000000000400000000100000f905e9f89b94a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000009787ffbd8ac920317ba43333913419f14489aa5fa00000000000000000000000009ae49c0d7f8f9ef4b864e004fe86ac8294e20950a000000000000000000000000000000000000000000000000000000001e2cc30aff8fb947a3370075a54b187d7bd5dcebf0ff2b5552d4f7df842a0ea9415385bae08fe9f6dc457b02577166790cde83bb18cc340aac6cb81b824dea00000000000000000000000009ae49c0d7f8f9ef4b864e004fe86ac8294e20950b8a0000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000000000000000000000000000185d2db58bac0b000000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000001e2cc30af0000000000000000000000009ae49c0d7f8f9ef4b864e004fe86ac8294e20950f89b94a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48f863a0ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa00000000000000000000000009ae49c0d7f8f9ef4b864e004fe86ac8294e20950a0000000000000000000000000ee1e33029c2104993e4536be502990284e77080da000000000000000000000000000000000000000000000000000000001e2cc30aff8999452166528fcc12681af996e409ee3a421a4e128a3e1a0366bc34352215bf0bd3b527cfd6718605e1f5938777e42bcd8ed92f578368f52b8600000000000000000000000007a3370075a54b187d7bd5dcebf0ff2b5552d4f7d000000000000000000000000440bbd6a888a36de6e2f6a25f65bc4e16874faa9000000000000000000000000000000000000000000000001604419076f65dc91f8799452166528fcc12681af996e409ee3a421a4e128a3e1a0f838f6ddc89706878e3c3e698e9b5cbfbf2c0e3d3dcd0bd2e00f1ccf313e0185b8400000000000000000000000007a3370075a54b187d7bd5dcebf0ff2b5552d4f7d00000000000000000000000000000000000000000000000335f43a66ae9857fef901bc949ae49c0d7f8f9ef4b864e004fe86ac8294e20950f842a0d30ca399cb43507ecec6a629a35cf45eb98cda550c27696dcb0d8c4a3873ce6ca0000000000000000000000000ee1e33029c2104993e4536be502990284e77080db90160000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000185d2db58bac0b00000000000000000000000000000000000000000000000000000000001e2cc30af000000000000000000000000ee1e33029c2104993e4536be502990284e77080d00000000000000000000000000000000000000000000000185d2db58bac0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007a3370075a54b187d7bd5dcebf0ff2b5552d4f7d000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000045045524d00000000000000000000000000000000000000000000000000000000f8db94818e6fecd516ecc3849daf6845e3ec868087b755f842a01849bd6a030a1bca28b83437fd3de96f3d27a5d172fa7e9c78e7b61468928a39a0000000000000000000000000ee1e33029c2104993e4536be502990284e77080db880000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000185d2db58bac0b00000000000000000000000000000000000000000000000000000000001e2cc30af"));
    encodedPath = bytes(HexToBytes("2b"));
    root = bytes(HexToBytes("906bba855aa07e32a7e329527c1d2c7ee2513e760a57229a6cb27d887b2ed8cf"));//size32
    all_parnet_rlp_sizes = {276, 532, 1790};
    all_parent_nodes_rlps.clear();
    all_parent_nodes_rlps =
    {
    0xf9,0x01,0x11,0xa0,0xdc,0xa7,0x52,0x74,0xc9,0xab,0x9c,0xde,0xde,0x5d,0x2e,0x05,0x4d,0xcb,0x1f,0xc8,0x6a,0xb6,0x71,0x00,0xd1,0x7c,0x6e,0x4e,0x50,0x53,0x62,0x31,0xb9,0xf7,0x99,0x90,0xa0,0xcc,0xbf,0x97,0xeb,0x6f,0x6e,0x37,0x88,0xff,0x84,0x7f,0xdf,0x0a,0x23,0x6d,0x69,0x7d,0x80,0x0a,0xc3,0x16,0x37,0xba,0xa8,0x73,0x2f,0xe8,0x12,0x2d,0xbc,0x33,0x68,0xa0,0x26,0xc0,0xfe,0x4c,0x00,0x04,0x7e,0xdb,0x4f,0x71,0x4e,0x8b,0xc4,0x70,0xcf,0x2d,0x94,0xeb,0x5f,0x1d,0xad,0x7a,0x9a,0xc7,0x74,0xc3,0x4c,0x32,0xa0,0x01,0x53,0x9a,0xa0,0x38,0x2d,0xaf,0x57,0x4d,0x2c,0x8a,0xb8,0xfb,0xe0,0xf6,0xf9,0xf0,0x82,0x6e,0x8e,0xf3,0xc8,0xdf,0x20,0x15,0x73,0x0f,0x71,0xc9,0xf4,0xd1,0x57,0x57,0xf3,0xba,0x82,0xa0,0x85,0x42,0x52,0x73,0x22,0xcd,0x8d,0x4f,0x73,0xec,0x53,0x80,0x3c,0xa2,0x73,0xa9,0x03,0xb6,0x09,0x5d,0xb1,0x90,0x7d,0x39,0x5e,0x09,0xfd,0xae,0x1c,0x47,0xbd,0x63,0xa0,0x8e,0xe8,0x06,0x5d,0x35,0x4b,0xe4,0x4f,0xc5,0xeb,0xb2,0x0c,0xd9,0x39,0x19,0xb3,0x9a,0x54,0xf5,0xa8,0x71,0xb6,0xdf,0x99,0xf0,0xcb,0x48,0xc6,0x4c,0xb8,0x7c,0xd6,0xa0,0xa3,0xb5,0xb7,0xc9,0x95,0xc9,0x4e,0x6c,0x8b,0xe6,0x10,0xab,0x5a,0x1e,0xa1,0x52,0xa3,0xe3,0x13,0x34,0x30,0x10,0x07,0xa3,0x16,0xd6,0xcf,0x8c,0x7c,0x9e,0xe7,0x6e,0x80,0xa0,0xe5,0x82,0x15,0xbe,0x84,0x8c,0x12,0x93,0xdd,0x38,0x12,0x10,0x35,0x9d,0x84,0x48,0x55,0x53,0x00,0x0a,0x82,0xb6,0x74,0x10,0x40,0x6d,0x18,0x3b,0x42,0xad,0xbb,0xdd,0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,
    0xf9,0x02,0x11,0xa0,0xef,0x46,0x79,0x92,0x09,0x8c,0xa0,0xe2,0xa8,0x51,0x55,0x3d,0xe8,0x78,0x0e,0x2f,0x20,0x90,0x12,0xd2,0xbd,0x58,0x92,0x21,0x98,0x02,0xa6,0x8b,0x67,0x85,0xf5,0x39,0xa0,0x94,0xba,0xd2,0x0b,0xa1,0x1b,0xef,0xe1,0xf2,0x41,0xc4,0x4d,0xca,0x58,0x92,0xba,0xce,0x27,0x6d,0xbb,0x10,0xde,0xee,0x1e,0x09,0xdd,0xad,0x26,0x82,0x73,0x72,0xfb,0xa0,0x3a,0x69,0x04,0xed,0x79,0xf7,0x34,0xdf,0x6b,0xd2,0x71,0xef,0x36,0xc9,0xb0,0x85,0xc0,0xd9,0x91,0xb2,0xc2,0x53,0x41,0xec,0x7b,0x4e,0x17,0x01,0x82,0xb2,0xd2,0x14,0xa0,0x58,0x61,0x37,0x52,0xce,0x4b,0x0b,0xd3,0xb2,0xce,0x58,0xe4,0xf2,0x34,0x5b,0x20,0xc7,0x3a,0xe3,0x9d,0xe7,0x3a,0x7b,0x71,0x2a,0xa9,0x51,0xca,0x8e,0x47,0xda,0x7f,0xa0,0x61,0x36,0x1b,0xad,0x46,0x13,0x88,0xc2,0x71,0x58,0x5c,0xe9,0x0e,0x8a,0xef,0x91,0xbd,0x76,0x8c,0x13,0xa7,0xf9,0x4d,0x48,0xe9,0xd1,0x04,0x0c,0xd5,0x13,0x78,0x6e,0xa0,0x3d,0xe3,0xf0,0x39,0x54,0x28,0xf0,0xa6,0x0b,0xef,0x1d,0x24,0x7b,0x77,0x73,0xbb,0xa2,0xed,0x55,0x09,0x63,0x01,0xfa,0xa6,0xde,0x94,0x09,0xcc,0xd9,0xd8,0xe2,0x07,0xa0,0x33,0x4b,0xe1,0xd9,0x0d,0xff,0x16,0xec,0x5b,0x33,0xfe,0x58,0xd9,0x84,0xc8,0x5c,0xf1,0x9d,0x01,0x26,0xf8,0xbc,0xd4,0x37,0xba,0x76,0xf4,0xf8,0xfa,0x92,0x08,0x33,0xa0,0xdd,0x8f,0x0e,0x1d,0xdc,0x3c,0xe3,0xd8,0x41,0xfd,0x48,0x59,0xf0,0x26,0xc6,0x11,0x00,0x46,0xb1,0x3d,0xbb,0x96,0x36,0x3d,0xec,0xb6,0x1d,0x4e,0xbe,0x93,0x6c,0x12,0xa0,0x2e,0xa1,0xd0,0xec,0x34,0x32,0x80,0x3e,0x84,0x8c,0x4c,0xba,0x7a,0xd4,0xe1,0xad,0x6f,0xa3,0x0f,0x0d,0x5b,0x49,0xea,0x11,0x6e,0xa4,0x56,0xd1,0x6f,0x19,0x7f,0xf1,0xa0,0x81,0x6e,0x07,0xe4,0x88,0xee,0xb1,0xdd,0x0f,0xe9,0x3b,0x82,0x2f,0x86,0xd2,0xdf,0x19,0xdd,0xf6,0xbe,0xe8,0xd2,0x23,0x3c,0x97,0x22,0x0d,0x9c,0xbf,0x91,0x28,0xff,0xa0,0xe2,0xe7,0xb0,0xf6,0x48,0x85,0x44,0xdf,0xd4,0xbe,0xb0,0x37,0xcf,0xe5,0x53,0x8f,0x3c,0x04,0x8a,0x4d,0xfe,0x5d,0xeb,0x7a,0x39,0x7c,0x49,0xc5,0x31,0x6f,0x7e,0xc6,0xa0,0xfe,0x46,0x9c,0xea,0x06,0xc5,0xb8,0xbb,0x0c,0x7d,0xce,0x7f,0xe8,0x99,0x82,0xd7,0xcf,0x38,0x3b,0x57,0x1f,0x47,0x2e,0xbc,0xde,0x2b,0xf0,0xf8,0x68,0x1c,0xfe,0xd4,0xa0,0xbc,0xee,0xc2,0xa6,0x0e,0xa5,0x0e,0x5b,0xf1,0x65,0xf8,0xec,0x7e,0x7c,0x6b,0xbd,0xba,0xfa,0xd0,0xaf,0x1f,0xb5,0x9a,0x65,0xb7,0xee,0x7e,0x4e,0xec,0xa0,0x9f,0xa3,0xa0,0x88,0x6a,0xc7,0x9b,0xa4,0xbd,0xe2,0x09,0xa1,0xdd,0x59,0xc9,0xc1,0xe1,0xe6,0xa5,0x2d,0xf3,0x57,0xde,0xa3,0xfd,0x3b,0xa6,0x0a,0x3c,0x7a,0xde,0x41,0x66,0x82,0x5e,0xa0,0xa6,0x1c,0x4d,0x02,0xc5,0x3a,0x94,0xcb,0x49,0x96,0x3c,0x2e,0xac,0x39,0xeb,0x48,0x6a,0xc3,0x8b,0xc9,0x84,0xb3,0x30,0xf4,0x66,0x54,0x27,0xea,0xd5,0xb7,0x70,0x0f,0xa0,0x11,0x94,0x8c,0x60,0x27,0x76,0xfa,0xcb,0x9d,0x72,0x3e,0x39,0xb9,0xcf,0xf5,0x03,0x2d,0x9c,0x1e,0x00,0x54,0xb7,0x2f,0xc7,0x07,0x8f,0x57,0x1b,0x64,0x16,0x6f,0xa9,0x80,
    0xf9,0x06,0xfb,0x20,0xb9,0x06,0xf7,0xf9,0x06,0xf4,0x01,0x83,0x31,0x32,0x99,0xb9,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x10,0x20,0x00,0x10,0x80,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x20,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x48,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0x00,0x00,0x00,0x00,0x00,0x04,0x40,0x08,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x02,0x09,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x08,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0xf9,0x05,0xe9,0xf8,0x9b,0x94,0xa0,0xb8,0x69,0x91,0xc6,0x21,0x8b,0x36,0xc1,0xd1,0x9d,0x4a,0x2e,0x9e,0xb0,0xce,0x36,0x06,0xeb,0x48,0xf8,0x63,0xa0,0xdd,0xf2,0x52,0xad,0x1b,0xe2,0xc8,0x9b,0x69,0xc2,0xb0,0x68,0xfc,0x37,0x8d,0xaa,0x95,0x2b,0xa7,0xf1,0x63,0xc4,0xa1,0x16,0x28,0xf5,0x5a,0x4d,0xf5,0x23,0xb3,0xef,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x97,0x87,0xff,0xbd,0x8a,0xc9,0x20,0x31,0x7b,0xa4,0x33,0x33,0x91,0x34,0x19,0xf1,0x44,0x89,0xaa,0x5f,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9a,0xe4,0x9c,0x0d,0x7f,0x8f,0x9e,0xf4,0xb8,0x64,0xe0,0x04,0xfe,0x86,0xac,0x82,0x94,0xe2,0x09,0x50,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xe2,0xcc,0x30,0xaf,0xf8,0xfb,0x94,0x7a,0x33,0x70,0x07,0x5a,0x54,0xb1,0x87,0xd7,0xbd,0x5d,0xce,0xbf,0x0f,0xf2,0xb5,0x55,0x2d,0x4f,0x7d,0xf8,0x42,0xa0,0xea,0x94,0x15,0x38,0x5b,0xae,0x08,0xfe,0x9f,0x6d,0xc4,0x57,0xb0,0x25,0x77,0x16,0x67,0x90,0xcd,0xe8,0x3b,0xb1,0x8c,0xc3,0x40,0xaa,0xc6,0xcb,0x81,0xb8,0x24,0xde,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9a,0xe4,0x9c,0x0d,0x7f,0x8f,0x9e,0xf4,0xb8,0x64,0xe0,0x04,0xfe,0x86,0xac,0x82,0x94,0xe2,0x09,0x50,0xb8,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x85,0xd2,0xdb,0x58,0xba,0xc0,0xb0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0xb8,0x69,0x91,0xc6,0x21,0x8b,0x36,0xc1,0xd1,0x9d,0x4a,0x2e,0x9e,0xb0,0xce,0x36,0x06,0xeb,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xe2,0xcc,0x30,0xaf,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9a,0xe4,0x9c,0x0d,0x7f,0x8f,0x9e,0xf4,0xb8,0x64,0xe0,0x04,0xfe,0x86,0xac,0x82,0x94,0xe2,0x09,0x50,0xf8,0x9b,0x94,0xa0,0xb8,0x69,0x91,0xc6,0x21,0x8b,0x36,0xc1,0xd1,0x9d,0x4a,0x2e,0x9e,0xb0,0xce,0x36,0x06,0xeb,0x48,0xf8,0x63,0xa0,0xdd,0xf2,0x52,0xad,0x1b,0xe2,0xc8,0x9b,0x69,0xc2,0xb0,0x68,0xfc,0x37,0x8d,0xaa,0x95,0x2b,0xa7,0xf1,0x63,0xc4,0xa1,0x16,0x28,0xf5,0x5a,0x4d,0xf5,0x23,0xb3,0xef,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x9a,0xe4,0x9c,0x0d,0x7f,0x8f,0x9e,0xf4,0xb8,0x64,0xe0,0x04,0xfe,0x86,0xac,0x82,0x94,0xe2,0x09,0x50,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xee,0x1e,0x33,0x02,0x9c,0x21,0x04,0x99,0x3e,0x45,0x36,0xbe,0x50,0x29,0x90,0x28,0x4e,0x77,0x08,0x0d,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xe2,0xcc,0x30,0xaf,0xf8,0x99,0x94,0x52,0x16,0x65,0x28,0xfc,0xc1,0x26,0x81,0xaf,0x99,0x6e,0x40,0x9e,0xe3,0xa4,0x21,0xa4,0xe1,0x28,0xa3,0xe1,0xa0,0x36,0x6b,0xc3,0x43,0x52,0x21,0x5b,0xf0,0xbd,0x3b,0x52,0x7c,0xfd,0x67,0x18,0x60,0x5e,0x1f,0x59,0x38,0x77,0x7e,0x42,0xbc,0xd8,0xed,0x92,0xf5,0x78,0x36,0x8f,0x52,0xb8,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7a,0x33,0x70,0x07,0x5a,0x54,0xb1,0x87,0xd7,0xbd,0x5d,0xce,0xbf,0x0f,0xf2,0xb5,0x55,0x2d,0x4f,0x7d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x0b,0xbd,0x6a,0x88,0x8a,0x36,0xde,0x6e,0x2f,0x6a,0x25,0xf6,0x5b,0xc4,0xe1,0x68,0x74,0xfa,0xa9,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x60,0x44,0x19,0x07,0x6f,0x65,0xdc,0x91,0xf8,0x79,0x94,0x52,0x16,0x65,0x28,0xfc,0xc1,0x26,0x81,0xaf,0x99,0x6e,0x40,0x9e,0xe3,0xa4,0x21,0xa4,0xe1,0x28,0xa3,0xe1,0xa0,0xf8,0x38,0xf6,0xdd,0xc8,0x97,0x06,0x87,0x8e,0x3c,0x3e,0x69,0x8e,0x9b,0x5c,0xbf,0xbf,0x2c,0x0e,0x3d,0x3d,0xcd,0x0b,0xd2,0xe0,0x0f,0x1c,0xcf,0x31,0x3e,0x01,0x85,0xb8,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7a,0x33,0x70,0x07,0x5a,0x54,0xb1,0x87,0xd7,0xbd,0x5d,0xce,0xbf,0x0f,0xf2,0xb5,0x55,0x2d,0x4f,0x7d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x35,0xf4,0x3a,0x66,0xae,0x98,0x57,0xfe,0xf9,0x01,0xbc,0x94,0x9a,0xe4,0x9c,0x0d,0x7f,0x8f,0x9e,0xf4,0xb8,0x64,0xe0,0x04,0xfe,0x86,0xac,0x82,0x94,0xe2,0x09,0x50,0xf8,0x42,0xa0,0xd3,0x0c,0xa3,0x99,0xcb,0x43,0x50,0x7e,0xce,0xc6,0xa6,0x29,0xa3,0x5c,0xf4,0x5e,0xb9,0x8c,0xda,0x55,0x0c,0x27,0x69,0x6d,0xcb,0x0d,0x8c,0x4a,0x38,0x73,0xce,0x6c,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xee,0x1e,0x33,0x02,0x9c,0x21,0x04,0x99,0x3e,0x45,0x36,0xbe,0x50,0x29,0x90,0x28,0x4e,0x77,0x08,0x0d,0xb9,0x01,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0xb8,0x69,0x91,0xc6,0x21,0x8b,0x36,0xc1,0xd1,0x9d,0x4a,0x2e,0x9e,0xb0,0xce,0x36,0x06,0xeb,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x85,0xd2,0xdb,0x58,0xba,0xc0,0xb0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xe2,0xcc,0x30,0xaf,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xee,0x1e,0x33,0x02,0x9c,0x21,0x04,0x99,0x3e,0x45,0x36,0xbe,0x50,0x29,0x90,0x28,0x4e,0x77,0x08,0x0d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x85,0xd2,0xdb,0x58,0xba,0xc0,0xb0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7a,0x33,0x70,0x07,0x5a,0x54,0xb1,0x87,0xd7,0xbd,0x5d,0xce,0xbf,0x0f,0xf2,0xb5,0x55,0x2d,0x4f,0x7d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x50,0x45,0x52,0x4d,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0xdb,0x94,0x81,0x8e,0x6f,0xec,0xd5,0x16,0xec,0xc3,0x84,0x9d,0xaf,0x68,0x45,0xe3,0xec,0x86,0x80,0x87,0xb7,0x55,0xf8,0x42,0xa0,0x18,0x49,0xbd,0x6a,0x03,0x0a,0x1b,0xca,0x28,0xb8,0x34,0x37,0xfd,0x3d,0xe9,0x6f,0x3d,0x27,0xa5,0xd1,0x72,0xfa,0x7e,0x9c,0x78,0xe7,0xb6,0x14,0x68,0x92,0x8a,0x39,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xee,0x1e,0x33,0x02,0x9c,0x21,0x04,0x99,0x3e,0x45,0x36,0xbe,0x50,0x29,0x90,0x28,0x4e,0x77,0x08,0x0d,0xb8,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0xee,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xa0,0xb8,0x69,0x91,0xc6,0x21,0x8b,0x36,0xc1,0xd1,0x9d,0x4a,0x2e,0x9e,0xb0,0xce,0x36,0x06,0xeb,0x48,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x85,0xd2,0xdb,0x58,0xba,0xc0,0xb0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xe2,0xcc,0x30,0xaf
    };

    trieValue(encodedPath, value, all_parent_nodes_rlps, all_parnet_rlp_sizes, root);

    return true;
    /////////////////////////////////////////

}
*/

